#https://leetcode.com/problems/combination-sum-ii/description/

class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        
        def backtrack(start, target, path):
            if target == 0:
                result.append(path)

            for i in range(start, len(candidates)):
                #skip duplicates
                if i > start and candidates[i] == candidates[i - 1]:
                    continue

                # Skip if the current number is greater than the remaining target
                if candidates[i] > target:
                    break 

                #include the current number and proceed recursively
                backtrack (i+1, target - candidates[i], path + [candidates[i]])
        result = []
        candidates.sort()
        backtrack(0, target, [])
        return result
        
